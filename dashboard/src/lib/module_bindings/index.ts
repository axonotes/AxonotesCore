// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit 12256faf1a0bb47ef81d9b66f6f27b866b560fd7).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
    AlgebraicType,
    AlgebraicValue,
    BinaryReader,
    BinaryWriter,
    ConnectionId,
    DbConnectionBuilder,
    DbConnectionImpl,
    Identity,
    ProductType,
    ProductTypeElement,
    SubscriptionBuilderImpl,
    SumType,
    SumTypeVariant,
    TableCache,
    TimeDuration,
    Timestamp,
    deepEqual,
    type CallReducerFlags,
    type DbContext,
    type ErrorContextInterface,
    type Event,
    type EventContextInterface,
    type ReducerEventContextInterface,
    type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import {ClientConnected} from "./client_connected_reducer.ts";
export {ClientConnected};
import {InitEncryptionAndSigning} from "./init_encryption_and_signing_reducer.ts";
export {InitEncryptionAndSigning};
import {UpdateEncryptionKeys} from "./update_encryption_keys_reducer.ts";
export {UpdateEncryptionKeys};

// Import and reexport all table handle types
import {UserTableHandle} from "./user_table.ts";
export {UserTableHandle};

// Import and reexport all types
import {User} from "./user_type.ts";
export {User};

const REMOTE_MODULE = {
    tables: {
        user: {
            tableName: "user",
            rowType: User.getTypeScriptAlgebraicType(),
            primaryKey: "identity",
            primaryKeyInfo: {
                colName: "identity",
                colType:
                    User.getTypeScriptAlgebraicType().product.elements[0]
                        .algebraicType,
            },
        },
    },
    reducers: {
        client_connected: {
            reducerName: "client_connected",
            argsType: ClientConnected.getTypeScriptAlgebraicType(),
        },
        init_encryption_and_signing: {
            reducerName: "init_encryption_and_signing",
            argsType: InitEncryptionAndSigning.getTypeScriptAlgebraicType(),
        },
        update_encryption_keys: {
            reducerName: "update_encryption_keys",
            argsType: UpdateEncryptionKeys.getTypeScriptAlgebraicType(),
        },
    },
    versionInfo: {
        cliVersion: "1.2.0",
    },
    // Constructors which are used by the DbConnectionImpl to
    // extract type information from the generated RemoteModule.
    //
    // NOTE: This is not strictly necessary for `eventContextConstructor` because
    // all we do is build a TypeScript object which we could have done inside the
    // SDK, but if in the future we wanted to create a class this would be
    // necessary because classes have methods, so we'll keep it.
    eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
        return {
            ...(imp as DbConnection),
            event,
        };
    },
    dbViewConstructor: (imp: DbConnectionImpl) => {
        return new RemoteTables(imp);
    },
    reducersConstructor: (
        imp: DbConnectionImpl,
        setReducerFlags: SetReducerFlags
    ) => {
        return new RemoteReducers(imp, setReducerFlags);
    },
    setReducerFlagsConstructor: () => {
        return new SetReducerFlags();
    },
};

// A type representing all the possible variants of a reducer.
export type Reducer =
    | never
    | {name: "ClientConnected"; args: ClientConnected}
    | {name: "InitEncryptionAndSigning"; args: InitEncryptionAndSigning}
    | {name: "UpdateEncryptionKeys"; args: UpdateEncryptionKeys};

export class RemoteReducers {
    constructor(
        private connection: DbConnectionImpl,
        private setCallReducerFlags: SetReducerFlags
    ) {}

    onClientConnected(callback: (ctx: ReducerEventContext) => void) {
        this.connection.onReducer("client_connected", callback);
    }

    removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
        this.connection.offReducer("client_connected", callback);
    }

    initEncryptionAndSigning(
        publicKey: string,
        encryptedPrivateKey: string,
        encryptedBackupKey: string,
        publicSigningKey: string,
        encryptedPrivateSigningKey: string,
        encryptedPrivateBackupSigningKey: string,
        argonSalt: string
    ) {
        const __args = {
            publicKey,
            encryptedPrivateKey,
            encryptedBackupKey,
            publicSigningKey,
            encryptedPrivateSigningKey,
            encryptedPrivateBackupSigningKey,
            argonSalt,
        };
        let __writer = new BinaryWriter(1024);
        InitEncryptionAndSigning.getTypeScriptAlgebraicType().serialize(
            __writer,
            __args
        );
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer(
            "init_encryption_and_signing",
            __argsBuffer,
            this.setCallReducerFlags.initEncryptionAndSigningFlags
        );
    }

    onInitEncryptionAndSigning(
        callback: (
            ctx: ReducerEventContext,
            publicKey: string,
            encryptedPrivateKey: string,
            encryptedBackupKey: string,
            publicSigningKey: string,
            encryptedPrivateSigningKey: string,
            encryptedPrivateBackupSigningKey: string,
            argonSalt: string
        ) => void
    ) {
        this.connection.onReducer("init_encryption_and_signing", callback);
    }

    removeOnInitEncryptionAndSigning(
        callback: (
            ctx: ReducerEventContext,
            publicKey: string,
            encryptedPrivateKey: string,
            encryptedBackupKey: string,
            publicSigningKey: string,
            encryptedPrivateSigningKey: string,
            encryptedPrivateBackupSigningKey: string,
            argonSalt: string
        ) => void
    ) {
        this.connection.offReducer("init_encryption_and_signing", callback);
    }

    updateEncryptionKeys(
        newEncryptedPrivateKey: string,
        newEncryptedPrivateSigningKey: string,
        newArgonSalt: string,
        signatureBase64: string
    ) {
        const __args = {
            newEncryptedPrivateKey,
            newEncryptedPrivateSigningKey,
            newArgonSalt,
            signatureBase64,
        };
        let __writer = new BinaryWriter(1024);
        UpdateEncryptionKeys.getTypeScriptAlgebraicType().serialize(
            __writer,
            __args
        );
        let __argsBuffer = __writer.getBuffer();
        this.connection.callReducer(
            "update_encryption_keys",
            __argsBuffer,
            this.setCallReducerFlags.updateEncryptionKeysFlags
        );
    }

    onUpdateEncryptionKeys(
        callback: (
            ctx: ReducerEventContext,
            newEncryptedPrivateKey: string,
            newEncryptedPrivateSigningKey: string,
            newArgonSalt: string,
            signatureBase64: string
        ) => void
    ) {
        this.connection.onReducer("update_encryption_keys", callback);
    }

    removeOnUpdateEncryptionKeys(
        callback: (
            ctx: ReducerEventContext,
            newEncryptedPrivateKey: string,
            newEncryptedPrivateSigningKey: string,
            newArgonSalt: string,
            signatureBase64: string
        ) => void
    ) {
        this.connection.offReducer("update_encryption_keys", callback);
    }
}

export class SetReducerFlags {
    initEncryptionAndSigningFlags: CallReducerFlags = "FullUpdate";
    initEncryptionAndSigning(flags: CallReducerFlags) {
        this.initEncryptionAndSigningFlags = flags;
    }

    updateEncryptionKeysFlags: CallReducerFlags = "FullUpdate";
    updateEncryptionKeys(flags: CallReducerFlags) {
        this.updateEncryptionKeysFlags = flags;
    }
}

export class RemoteTables {
    constructor(private connection: DbConnectionImpl) {}

    get user(): UserTableHandle {
        return new UserTableHandle(
            this.connection.clientCache.getOrCreateTable<User>(
                REMOTE_MODULE.tables.user
            )
        );
    }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<
    RemoteTables,
    RemoteReducers,
    SetReducerFlags
> {}

export class DbConnection extends DbConnectionImpl<
    RemoteTables,
    RemoteReducers,
    SetReducerFlags
> {
    static builder = (): DbConnectionBuilder<
        DbConnection,
        ErrorContext,
        SubscriptionEventContext
    > => {
        return new DbConnectionBuilder<
            DbConnection,
            ErrorContext,
            SubscriptionEventContext
        >(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
    };
    subscriptionBuilder = (): SubscriptionBuilder => {
        return new SubscriptionBuilder(this);
    };
}

export type EventContext = EventContextInterface<
    RemoteTables,
    RemoteReducers,
    SetReducerFlags,
    Reducer
>;
export type ReducerEventContext = ReducerEventContextInterface<
    RemoteTables,
    RemoteReducers,
    SetReducerFlags,
    Reducer
>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<
    RemoteTables,
    RemoteReducers,
    SetReducerFlags
>;
export type ErrorContext = ErrorContextInterface<
    RemoteTables,
    RemoteReducers,
    SetReducerFlags
>;
